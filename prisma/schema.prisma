// 
//  Prisma schema file for the ppi-sensus project.
//  This file defines the data models and relationships used by Prisma.
//  For more information, refer to the Prisma schema documentation: https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference
//  

 
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"] // added for use with postgreSQL
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid()) @map("_id") // @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id") // @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ACTIVE
  INACTIVE
}

enum Verification {
  VERIFIED
  UNVERIFIED
  REJECTED
}   

model User {    
  id                          String       @id @default(cuid()) @map("_id") // @db.ObjectId
  name                        String?
  email                       String?      @unique
  emailVerified               DateTime?
  image                       String?
  accounts                    Account[]
  sessions                    Session[]
  role                        Role         @default(USER)
  status                      Status       @default(ACTIVE)
  verification                Verification @default(UNVERIFIED)
  ppicabang                   String?      
  updated                     Boolean      @default(false)
  birthDate                   DateTime?
  occupation                  String?
  fieldOfStudy                String?
  studySpecialization         String?
  location                    String?
  bundesland                  String?
  expectedGraduation          String?
  universityName              String?
  universityEmail             String?
  universityEmailVerificationToken UniversityEmailVerificationToken[]
  // forwardDataThirdParty    Boolean      @default(false)
  // useDataForResearch       Boolean      @default(false)
  // agreedToTermsAndCond     Boolean      @default(false)
  affiliation                 String[]     @default([]) // change to normal string instead of list
  createdAt                   DateTime     @default(now())
  updatedAt                   DateTime     @updatedAt
  Audit                       Audit[]

  @@index([role])
  @@index([status])
  @@index([verification])
  @@index([occupation])
  @@index([location])
}

model Audit {
  id        String   @id @default(cuid()) @map("_id") // @db.ObjectId
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  action    String
  input     Json?
  createdAt DateTime @default(now())
  success   Boolean  @default(true)
  error     String?
}

model UniversityEmailVerificationToken {
  id       String   @id @default(cuid()) @map("_id")
  email    String
  token    String   @unique
  expires  DateTime
  userId   String?  // field to store user id
  user     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([email, token])
}
